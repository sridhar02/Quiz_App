{"version":3,"sources":["App.js","index.js"],"names":["questions","require","useAnswersStyles","makeStyles","answers","display","justifyContent","maginTop","marginBottom","flexWrap","minWidth","buttons","background","color","Answers","checkAnswer","classes","className","map","answer","Button","variant","onClick","key","decodeURIComponent","useAppStyles","container","border","padding","paddingTop","margin","minHeight","heading","fontSize","fontWeight","subHeading","result","alignItems","score","pogress1","backgroundColor","progress2","progress3","progress","borderRadius","BorderLinearProgress","withStyles","root","height","bar","LinearProgress","App","questionRating","useState","questionNumber","setQuestionNumber","question","setQuestion","incorrect_answers","correct_answer","setAnswers","category","setCategory","difficulty","rating","setRating","type","setType","showResult","setShowResult","correct","setCorrect","wrong","setWrong","isAnswered","setIsAswered","showButton","setShowButton","useEffect","Rating","name","value","max","Show","min","length","console","log","number","setQuestions","style","width","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.878d2179.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\n\nimport { Button, makeStyles, withStyles } from \"@material-ui/core\";\nimport LinearProgress from \"@material-ui/core/LinearProgress\";\nimport Rating from \"@material-ui/lab/Rating\";\n\nconst questions = require(\"./questions.json\");\n\nconst useAnswersStyles = makeStyles({\n  answers: {\n    display: \"flex\",\n    justifyContent: \"space-between\",\n    maginTop: \"30px\",\n    marginBottom: \"30px\",\n    flexWrap: \"wrap\",\n    minWidth: \"20%\",\n  },\n  buttons: {\n    marginBottom: \"30px\",\n    \"&:hover\": {\n      background: \"black\",\n      color: \"white\",\n    },\n  },\n});\nfunction Answers({ answers, checkAnswer }) {\n  const classes = useAnswersStyles();\n  return (\n    <div className={classes.answers}>\n      {answers &&\n        answers.map((answer) => (\n          <Button\n            variant=\"contained\"\n            onClick={() => checkAnswer(answer)}\n            key={answer}\n            className={classes.buttons}\n          >\n            {decodeURIComponent(answer)}\n          </Button>\n        ))}\n    </div>\n  );\n}\n\nconst useAppStyles = makeStyles({\n  container: {\n    border: \"2px solid grey\",\n    padding: \"8px\",\n    paddingTop: 0,\n    // width: \"50%\",\n    margin: \"8px\",\n    minHeight: \"85vh\",\n  },\n  heading: {\n    fontSize: \"35px\",\n    fontWeight: \"bold\",\n    marginBottom: \"8px\",\n  },\n  subHeading: {\n    fontSize: \"15px\",\n  },\n  result: {\n    display: \"flex\",\n    justifyContent: \"center\",\n    alignItems: \"center\",\n    fontSize: \"30px\",\n    marginBottom: \"20px\",\n  },\n  score: {\n    display: \"flex\",\n    justifyContent: \"space-between\",\n    padding: \"8px\",\n  },\n  pogress1: {\n    backgroundColor: \"#000000\",\n  },\n  progress2: {\n    backgroundColor: \"#717171\",\n  },\n  progress3: {\n    backgroundColor: \"#d2d2d2\",\n  },\n  progress: {\n    display: \"flex\",\n    border: \"1px solid black\",\n    borderRadius: \"8px \",\n  },\n});\n\nconst BorderLinearProgress = withStyles({\n  root: {\n    height: 15,\n    backgroundColor: \"#fff\",\n  },\n  bar: {\n    borderRadius: 20,\n    backgroundColor: \"#a9aaa9\",\n  },\n})(LinearProgress);\n\nfunction App() {\n  const classes = useAppStyles();\n\n  const [questionNumber, setQuestionNumber] = useState(0);\n  const [question, setQuestion] = useState(questions[questionNumber].question);\n  const [answers, setAnswers] = useState([\n    ...questions[questionNumber].incorrect_answers,\n    questions[questionNumber].correct_answer,\n  ]);\n  const [category, setCategory] = useState(questions[questionNumber].category);\n  const [rating, setRating] = useState(questions[questionNumber].difficulty);\n  const [type, setType] = useState(questions[questionNumber].type);\n  const [showResult, setShowResult] = useState(false);\n\n  const [correct, setCorrect] = useState(0);\n  const [wrong, setWrong] = useState(0);\n  const [isAnswered, setIsAswered] = useState(false);\n  const [showButton, setShowButton] = useState(false);\n\n  const setQuestions = () => {\n    if (questionNumber + 1 === questions.length) {\n      setQuestionNumber(0);\n    } else {\n      let number = questionNumber + 1;\n      setQuestionNumber(questionNumber + 1);\n      setQuestion(questions[number].question);\n      setAnswers([\n        ...questions[number].incorrect_answers,\n        questions[number].correct_answer,\n      ]);\n      setType(questions[number].type);\n      setCategory(questions[number].category);\n      setRating(questions[number].difficulty);\n      setIsAswered(false);\n      setShowResult(false);\n      setShowButton(false);\n    }\n  };\n  useEffect(() => {\n    // setQuestions();\n  }, []);\n\n  const checkAnswer = (answer) => {\n    if (!isAnswered) {\n      if (type === \"multiple\") {\n        if (answers[3] === answer) {\n          setCorrect(correct + 1);\n          setIsAswered(true);\n          setShowResult(true);\n          setShowButton(true);\n        } else {\n          setWrong(wrong + 1);\n          setShowButton(true);\n          setShowResult(true);\n          setIsAswered(false);\n        }\n      } else if (type === \"boolean\") {\n        if (answers[1] === answer) {\n          setCorrect(correct + 1);\n          setIsAswered(true);\n          setShowResult(true);\n          setShowButton(true);\n        } else {\n          setWrong(wrong + 1);\n          setShowButton(true);\n          setShowResult(true);\n          setIsAswered(false);\n        }\n      }\n    }\n  };\n\n  let questionRating;\n  if (rating === \"easy\") {\n    questionRating = <Rating name=\"pristine\" value={1} max={3} />;\n  } else if (rating === \"hard\") {\n    questionRating = <Rating name=\"pristine\" value={3} max={3} />;\n  } else {\n    questionRating = <Rating name=\"pristine\" value={2} max={3} />;\n  }\n\n  const Show = (\n    <div className={classes.result}> {isAnswered ? \"Correct!\" : \"Sorry!\"}</div>\n  );\n\n  const min = (correct / questions.length) * 100;\n  let score;\n  if (questionNumber === 0) {\n    score = 0;\n  } else {\n    score = (correct / (correct + wrong)) * 100;\n  }\n  const max =\n    ((correct + (questions.length - (correct + wrong))) / questions.length) *\n    100;\n\n  console.log(min, score, max, correct, wrong);\n\n  return (\n    <div className={classes.container}>\n      <BorderLinearProgress\n        variant=\"determinate\"\n        color=\"secondary\"\n        value={((questionNumber + 1) / questions.length) * 100}\n      />\n      <div className={classes.heading}>\n        Question {questionNumber + 1} of {questions.length}\n      </div>\n      <span className={classes.subHeading}>{decodeURIComponent(category)}</span>\n      <div>{questionRating}</div>\n      <h4>{decodeURIComponent(question)}</h4>\n      <Answers answers={answers} checkAnswer={checkAnswer} />\n      {showResult && Show}\n      {showButton && (\n        <div className={classes.result}>\n          <Button variant=\"contained\" onClick={() => setQuestions()}>\n            Next Question\n          </Button>\n        </div>\n      )}\n      <div className={classes.score}>\n        <div>Score :{score}% </div>\n        <div>Max Score : {max} % </div>\n      </div>\n      <div className={classes.progress}>\n        <div\n          style={{ width: ` ${min}%`, backgroundColor: \"#000\", height: \"20px\" }}\n        ></div>\n        <div\n          style={{\n            width: `${score - min}%`,\n            backgroundColor: \"#717171\",\n            height: \"20px\",\n          }}\n        ></div>\n        <div\n          style={{\n            width: `${max - score}%`,\n            backgroundColor: \"#d2d2d2\",\n            height: \"20px\",\n          }}\n        ></div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}